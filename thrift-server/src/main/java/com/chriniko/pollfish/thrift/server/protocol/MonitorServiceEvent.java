/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chriniko.pollfish.thrift.server.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-22")
public class MonitorServiceEvent implements org.apache.thrift.TBase<MonitorServiceEvent, MonitorServiceEvent._Fields>, java.io.Serializable, Cloneable, Comparable<MonitorServiceEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonitorServiceEvent");

  private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVICE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MonitorServiceEventStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MonitorServiceEventTupleSchemeFactory();

  public short v; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String serviceId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String serviceUrl; // required
  /**
   * 
   * @see InfoEventType
   */
  public @org.apache.thrift.annotation.Nullable InfoEventType type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V((short)1, "v"),
    SERVICE_ID((short)2, "serviceId"),
    SERVICE_URL((short)3, "serviceUrl"),
    /**
     * 
     * @see InfoEventType
     */
    TYPE((short)4, "type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V
          return V;
        case 2: // SERVICE_ID
          return SERVICE_ID;
        case 3: // SERVICE_URL
          return SERVICE_URL;
        case 4: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __V_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.V};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_URL, new org.apache.thrift.meta_data.FieldMetaData("serviceUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InfoEventType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonitorServiceEvent.class, metaDataMap);
  }

  public MonitorServiceEvent() {
    this.v = (short)1;

  }

  public MonitorServiceEvent(
    java.lang.String serviceId,
    java.lang.String serviceUrl,
    InfoEventType type)
  {
    this();
    this.serviceId = serviceId;
    this.serviceUrl = serviceUrl;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonitorServiceEvent(MonitorServiceEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.v = other.v;
    if (other.isSetServiceId()) {
      this.serviceId = other.serviceId;
    }
    if (other.isSetServiceUrl()) {
      this.serviceUrl = other.serviceUrl;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public MonitorServiceEvent deepCopy() {
    return new MonitorServiceEvent(this);
  }

  @Override
  public void clear() {
    this.v = (short)1;

    this.serviceId = null;
    this.serviceUrl = null;
    this.type = null;
  }

  public short getV() {
    return this.v;
  }

  public MonitorServiceEvent setV(short v) {
    this.v = v;
    setVIsSet(true);
    return this;
  }

  public void unsetV() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V_ISSET_ID);
  }

  /** Returns true if field v is set (has been assigned a value) and false otherwise */
  public boolean isSetV() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V_ISSET_ID);
  }

  public void setVIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServiceId() {
    return this.serviceId;
  }

  public MonitorServiceEvent setServiceId(@org.apache.thrift.annotation.Nullable java.lang.String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  public void unsetServiceId() {
    this.serviceId = null;
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return this.serviceId != null;
  }

  public void setServiceIdIsSet(boolean value) {
    if (!value) {
      this.serviceId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServiceUrl() {
    return this.serviceUrl;
  }

  public MonitorServiceEvent setServiceUrl(@org.apache.thrift.annotation.Nullable java.lang.String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

  public void unsetServiceUrl() {
    this.serviceUrl = null;
  }

  /** Returns true if field serviceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceUrl() {
    return this.serviceUrl != null;
  }

  public void setServiceUrlIsSet(boolean value) {
    if (!value) {
      this.serviceUrl = null;
    }
  }

  /**
   * 
   * @see InfoEventType
   */
  @org.apache.thrift.annotation.Nullable
  public InfoEventType getType() {
    return this.type;
  }

  /**
   * 
   * @see InfoEventType
   */
  public MonitorServiceEvent setType(@org.apache.thrift.annotation.Nullable InfoEventType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case V:
      if (value == null) {
        unsetV();
      } else {
        setV((java.lang.Short)value);
      }
      break;

    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((java.lang.String)value);
      }
      break;

    case SERVICE_URL:
      if (value == null) {
        unsetServiceUrl();
      } else {
        setServiceUrl((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((InfoEventType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case V:
      return getV();

    case SERVICE_ID:
      return getServiceId();

    case SERVICE_URL:
      return getServiceUrl();

    case TYPE:
      return getType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case V:
      return isSetV();
    case SERVICE_ID:
      return isSetServiceId();
    case SERVICE_URL:
      return isSetServiceUrl();
    case TYPE:
      return isSetType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MonitorServiceEvent)
      return this.equals((MonitorServiceEvent)that);
    return false;
  }

  public boolean equals(MonitorServiceEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_v = true && this.isSetV();
    boolean that_present_v = true && that.isSetV();
    if (this_present_v || that_present_v) {
      if (!(this_present_v && that_present_v))
        return false;
      if (this.v != that.v)
        return false;
    }

    boolean this_present_serviceId = true && this.isSetServiceId();
    boolean that_present_serviceId = true && that.isSetServiceId();
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (!this.serviceId.equals(that.serviceId))
        return false;
    }

    boolean this_present_serviceUrl = true && this.isSetServiceUrl();
    boolean that_present_serviceUrl = true && that.isSetServiceUrl();
    if (this_present_serviceUrl || that_present_serviceUrl) {
      if (!(this_present_serviceUrl && that_present_serviceUrl))
        return false;
      if (!this.serviceUrl.equals(that.serviceUrl))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
    if (isSetV())
      hashCode = hashCode * 8191 + v;

    hashCode = hashCode * 8191 + ((isSetServiceId()) ? 131071 : 524287);
    if (isSetServiceId())
      hashCode = hashCode * 8191 + serviceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceUrl()) ? 131071 : 524287);
    if (isSetServiceUrl())
      hashCode = hashCode * 8191 + serviceUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(MonitorServiceEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceUrl()).compareTo(other.isSetServiceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceUrl, other.serviceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MonitorServiceEvent(");
    boolean first = true;

    if (isSetV()) {
      sb.append("v:");
      sb.append(this.v);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("serviceId:");
    if (this.serviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceUrl:");
    if (this.serviceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceId' was not present! Struct: " + toString());
    }
    if (serviceUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceUrl' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MonitorServiceEventStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MonitorServiceEventStandardScheme getScheme() {
      return new MonitorServiceEventStandardScheme();
    }
  }

  private static class MonitorServiceEventStandardScheme extends org.apache.thrift.scheme.StandardScheme<MonitorServiceEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MonitorServiceEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // V
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.v = iprot.readI16();
              struct.setVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceId = iprot.readString();
              struct.setServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVICE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceUrl = iprot.readString();
              struct.setServiceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.chriniko.pollfish.thrift.server.protocol.InfoEventType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MonitorServiceEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetV()) {
        oprot.writeFieldBegin(V_FIELD_DESC);
        oprot.writeI16(struct.v);
        oprot.writeFieldEnd();
      }
      if (struct.serviceId != null) {
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeString(struct.serviceId);
        oprot.writeFieldEnd();
      }
      if (struct.serviceUrl != null) {
        oprot.writeFieldBegin(SERVICE_URL_FIELD_DESC);
        oprot.writeString(struct.serviceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MonitorServiceEventTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MonitorServiceEventTupleScheme getScheme() {
      return new MonitorServiceEventTupleScheme();
    }
  }

  private static class MonitorServiceEventTupleScheme extends org.apache.thrift.scheme.TupleScheme<MonitorServiceEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MonitorServiceEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.serviceId);
      oprot.writeString(struct.serviceUrl);
      oprot.writeI32(struct.type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetV()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetV()) {
        oprot.writeI16(struct.v);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MonitorServiceEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.serviceId = iprot.readString();
      struct.setServiceIdIsSet(true);
      struct.serviceUrl = iprot.readString();
      struct.setServiceUrlIsSet(true);
      struct.type = com.chriniko.pollfish.thrift.server.protocol.InfoEventType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.v = iprot.readI16();
        struct.setVIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

