/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chriniko.pollfish.thrift.server.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-22")
public class ClickedOnAdvertisement implements org.apache.thrift.TBase<ClickedOnAdvertisement, ClickedOnAdvertisement._Fields>, java.io.Serializable, Cloneable, Comparable<ClickedOnAdvertisement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClickedOnAdvertisement");

  private static final org.apache.thrift.protocol.TField CLICK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("clickUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CALLBACK_TRACKER_FIELD_DESC = new org.apache.thrift.protocol.TField("callbackTracker", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClickedOnAdvertisementStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClickedOnAdvertisementTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String clickUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String callbackTracker; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLICK_URL((short)1, "clickUrl"),
    CALLBACK_TRACKER((short)2, "callbackTracker");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLICK_URL
          return CLICK_URL;
        case 2: // CALLBACK_TRACKER
          return CALLBACK_TRACKER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLICK_URL, new org.apache.thrift.meta_data.FieldMetaData("clickUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLBACK_TRACKER, new org.apache.thrift.meta_data.FieldMetaData("callbackTracker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClickedOnAdvertisement.class, metaDataMap);
  }

  public ClickedOnAdvertisement() {
  }

  public ClickedOnAdvertisement(
    java.lang.String clickUrl,
    java.lang.String callbackTracker)
  {
    this();
    this.clickUrl = clickUrl;
    this.callbackTracker = callbackTracker;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClickedOnAdvertisement(ClickedOnAdvertisement other) {
    if (other.isSetClickUrl()) {
      this.clickUrl = other.clickUrl;
    }
    if (other.isSetCallbackTracker()) {
      this.callbackTracker = other.callbackTracker;
    }
  }

  public ClickedOnAdvertisement deepCopy() {
    return new ClickedOnAdvertisement(this);
  }

  @Override
  public void clear() {
    this.clickUrl = null;
    this.callbackTracker = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClickUrl() {
    return this.clickUrl;
  }

  public ClickedOnAdvertisement setClickUrl(@org.apache.thrift.annotation.Nullable java.lang.String clickUrl) {
    this.clickUrl = clickUrl;
    return this;
  }

  public void unsetClickUrl() {
    this.clickUrl = null;
  }

  /** Returns true if field clickUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetClickUrl() {
    return this.clickUrl != null;
  }

  public void setClickUrlIsSet(boolean value) {
    if (!value) {
      this.clickUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCallbackTracker() {
    return this.callbackTracker;
  }

  public ClickedOnAdvertisement setCallbackTracker(@org.apache.thrift.annotation.Nullable java.lang.String callbackTracker) {
    this.callbackTracker = callbackTracker;
    return this;
  }

  public void unsetCallbackTracker() {
    this.callbackTracker = null;
  }

  /** Returns true if field callbackTracker is set (has been assigned a value) and false otherwise */
  public boolean isSetCallbackTracker() {
    return this.callbackTracker != null;
  }

  public void setCallbackTrackerIsSet(boolean value) {
    if (!value) {
      this.callbackTracker = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLICK_URL:
      if (value == null) {
        unsetClickUrl();
      } else {
        setClickUrl((java.lang.String)value);
      }
      break;

    case CALLBACK_TRACKER:
      if (value == null) {
        unsetCallbackTracker();
      } else {
        setCallbackTracker((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLICK_URL:
      return getClickUrl();

    case CALLBACK_TRACKER:
      return getCallbackTracker();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLICK_URL:
      return isSetClickUrl();
    case CALLBACK_TRACKER:
      return isSetCallbackTracker();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ClickedOnAdvertisement)
      return this.equals((ClickedOnAdvertisement)that);
    return false;
  }

  public boolean equals(ClickedOnAdvertisement that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clickUrl = true && this.isSetClickUrl();
    boolean that_present_clickUrl = true && that.isSetClickUrl();
    if (this_present_clickUrl || that_present_clickUrl) {
      if (!(this_present_clickUrl && that_present_clickUrl))
        return false;
      if (!this.clickUrl.equals(that.clickUrl))
        return false;
    }

    boolean this_present_callbackTracker = true && this.isSetCallbackTracker();
    boolean that_present_callbackTracker = true && that.isSetCallbackTracker();
    if (this_present_callbackTracker || that_present_callbackTracker) {
      if (!(this_present_callbackTracker && that_present_callbackTracker))
        return false;
      if (!this.callbackTracker.equals(that.callbackTracker))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClickUrl()) ? 131071 : 524287);
    if (isSetClickUrl())
      hashCode = hashCode * 8191 + clickUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallbackTracker()) ? 131071 : 524287);
    if (isSetCallbackTracker())
      hashCode = hashCode * 8191 + callbackTracker.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ClickedOnAdvertisement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetClickUrl()).compareTo(other.isSetClickUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickUrl, other.clickUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCallbackTracker()).compareTo(other.isSetCallbackTracker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallbackTracker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callbackTracker, other.callbackTracker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ClickedOnAdvertisement(");
    boolean first = true;

    sb.append("clickUrl:");
    if (this.clickUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.clickUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callbackTracker:");
    if (this.callbackTracker == null) {
      sb.append("null");
    } else {
      sb.append(this.callbackTracker);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (clickUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickUrl' was not present! Struct: " + toString());
    }
    if (callbackTracker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'callbackTracker' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClickedOnAdvertisementStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClickedOnAdvertisementStandardScheme getScheme() {
      return new ClickedOnAdvertisementStandardScheme();
    }
  }

  private static class ClickedOnAdvertisementStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClickedOnAdvertisement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClickedOnAdvertisement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLICK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clickUrl = iprot.readString();
              struct.setClickUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CALLBACK_TRACKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callbackTracker = iprot.readString();
              struct.setCallbackTrackerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClickedOnAdvertisement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clickUrl != null) {
        oprot.writeFieldBegin(CLICK_URL_FIELD_DESC);
        oprot.writeString(struct.clickUrl);
        oprot.writeFieldEnd();
      }
      if (struct.callbackTracker != null) {
        oprot.writeFieldBegin(CALLBACK_TRACKER_FIELD_DESC);
        oprot.writeString(struct.callbackTracker);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClickedOnAdvertisementTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClickedOnAdvertisementTupleScheme getScheme() {
      return new ClickedOnAdvertisementTupleScheme();
    }
  }

  private static class ClickedOnAdvertisementTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClickedOnAdvertisement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClickedOnAdvertisement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.clickUrl);
      oprot.writeString(struct.callbackTracker);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClickedOnAdvertisement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.clickUrl = iprot.readString();
      struct.setClickUrlIsSet(true);
      struct.callbackTracker = iprot.readString();
      struct.setCallbackTrackerIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

