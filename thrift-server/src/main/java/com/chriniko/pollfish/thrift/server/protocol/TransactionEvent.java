/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chriniko.pollfish.thrift.server.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-22")
public class TransactionEvent implements org.apache.thrift.TBase<TransactionEvent, TransactionEvent._Fields>, java.io.Serializable, Cloneable, Comparable<TransactionEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionEvent");

  private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromAccountId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TO_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toAccountId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransactionEventStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransactionEventTupleSchemeFactory();

  public short v; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String txId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fromAccountId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String toAccountId; // required
  public double amount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V((short)1, "v"),
    TX_ID((short)2, "txId"),
    FROM_ACCOUNT_ID((short)3, "fromAccountId"),
    TO_ACCOUNT_ID((short)4, "toAccountId"),
    AMOUNT((short)5, "amount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V
          return V;
        case 2: // TX_ID
          return TX_ID;
        case 3: // FROM_ACCOUNT_ID
          return FROM_ACCOUNT_ID;
        case 4: // TO_ACCOUNT_ID
          return TO_ACCOUNT_ID;
        case 5: // AMOUNT
          return AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __V_ISSET_ID = 0;
  private static final int __AMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.V};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TX_ID, new org.apache.thrift.meta_data.FieldMetaData("txId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("fromAccountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("toAccountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionEvent.class, metaDataMap);
  }

  public TransactionEvent() {
    this.v = (short)1;

  }

  public TransactionEvent(
    java.lang.String txId,
    java.lang.String fromAccountId,
    java.lang.String toAccountId,
    double amount)
  {
    this();
    this.txId = txId;
    this.fromAccountId = fromAccountId;
    this.toAccountId = toAccountId;
    this.amount = amount;
    setAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionEvent(TransactionEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.v = other.v;
    if (other.isSetTxId()) {
      this.txId = other.txId;
    }
    if (other.isSetFromAccountId()) {
      this.fromAccountId = other.fromAccountId;
    }
    if (other.isSetToAccountId()) {
      this.toAccountId = other.toAccountId;
    }
    this.amount = other.amount;
  }

  public TransactionEvent deepCopy() {
    return new TransactionEvent(this);
  }

  @Override
  public void clear() {
    this.v = (short)1;

    this.txId = null;
    this.fromAccountId = null;
    this.toAccountId = null;
    setAmountIsSet(false);
    this.amount = 0.0;
  }

  public short getV() {
    return this.v;
  }

  public TransactionEvent setV(short v) {
    this.v = v;
    setVIsSet(true);
    return this;
  }

  public void unsetV() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V_ISSET_ID);
  }

  /** Returns true if field v is set (has been assigned a value) and false otherwise */
  public boolean isSetV() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V_ISSET_ID);
  }

  public void setVIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTxId() {
    return this.txId;
  }

  public TransactionEvent setTxId(@org.apache.thrift.annotation.Nullable java.lang.String txId) {
    this.txId = txId;
    return this;
  }

  public void unsetTxId() {
    this.txId = null;
  }

  /** Returns true if field txId is set (has been assigned a value) and false otherwise */
  public boolean isSetTxId() {
    return this.txId != null;
  }

  public void setTxIdIsSet(boolean value) {
    if (!value) {
      this.txId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFromAccountId() {
    return this.fromAccountId;
  }

  public TransactionEvent setFromAccountId(@org.apache.thrift.annotation.Nullable java.lang.String fromAccountId) {
    this.fromAccountId = fromAccountId;
    return this;
  }

  public void unsetFromAccountId() {
    this.fromAccountId = null;
  }

  /** Returns true if field fromAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetFromAccountId() {
    return this.fromAccountId != null;
  }

  public void setFromAccountIdIsSet(boolean value) {
    if (!value) {
      this.fromAccountId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToAccountId() {
    return this.toAccountId;
  }

  public TransactionEvent setToAccountId(@org.apache.thrift.annotation.Nullable java.lang.String toAccountId) {
    this.toAccountId = toAccountId;
    return this;
  }

  public void unsetToAccountId() {
    this.toAccountId = null;
  }

  /** Returns true if field toAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetToAccountId() {
    return this.toAccountId != null;
  }

  public void setToAccountIdIsSet(boolean value) {
    if (!value) {
      this.toAccountId = null;
    }
  }

  public double getAmount() {
    return this.amount;
  }

  public TransactionEvent setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case V:
      if (value == null) {
        unsetV();
      } else {
        setV((java.lang.Short)value);
      }
      break;

    case TX_ID:
      if (value == null) {
        unsetTxId();
      } else {
        setTxId((java.lang.String)value);
      }
      break;

    case FROM_ACCOUNT_ID:
      if (value == null) {
        unsetFromAccountId();
      } else {
        setFromAccountId((java.lang.String)value);
      }
      break;

    case TO_ACCOUNT_ID:
      if (value == null) {
        unsetToAccountId();
      } else {
        setToAccountId((java.lang.String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case V:
      return getV();

    case TX_ID:
      return getTxId();

    case FROM_ACCOUNT_ID:
      return getFromAccountId();

    case TO_ACCOUNT_ID:
      return getToAccountId();

    case AMOUNT:
      return getAmount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case V:
      return isSetV();
    case TX_ID:
      return isSetTxId();
    case FROM_ACCOUNT_ID:
      return isSetFromAccountId();
    case TO_ACCOUNT_ID:
      return isSetToAccountId();
    case AMOUNT:
      return isSetAmount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionEvent)
      return this.equals((TransactionEvent)that);
    return false;
  }

  public boolean equals(TransactionEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_v = true && this.isSetV();
    boolean that_present_v = true && that.isSetV();
    if (this_present_v || that_present_v) {
      if (!(this_present_v && that_present_v))
        return false;
      if (this.v != that.v)
        return false;
    }

    boolean this_present_txId = true && this.isSetTxId();
    boolean that_present_txId = true && that.isSetTxId();
    if (this_present_txId || that_present_txId) {
      if (!(this_present_txId && that_present_txId))
        return false;
      if (!this.txId.equals(that.txId))
        return false;
    }

    boolean this_present_fromAccountId = true && this.isSetFromAccountId();
    boolean that_present_fromAccountId = true && that.isSetFromAccountId();
    if (this_present_fromAccountId || that_present_fromAccountId) {
      if (!(this_present_fromAccountId && that_present_fromAccountId))
        return false;
      if (!this.fromAccountId.equals(that.fromAccountId))
        return false;
    }

    boolean this_present_toAccountId = true && this.isSetToAccountId();
    boolean that_present_toAccountId = true && that.isSetToAccountId();
    if (this_present_toAccountId || that_present_toAccountId) {
      if (!(this_present_toAccountId && that_present_toAccountId))
        return false;
      if (!this.toAccountId.equals(that.toAccountId))
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
    if (isSetV())
      hashCode = hashCode * 8191 + v;

    hashCode = hashCode * 8191 + ((isSetTxId()) ? 131071 : 524287);
    if (isSetTxId())
      hashCode = hashCode * 8191 + txId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromAccountId()) ? 131071 : 524287);
    if (isSetFromAccountId())
      hashCode = hashCode * 8191 + fromAccountId.hashCode();

    hashCode = hashCode * 8191 + ((isSetToAccountId()) ? 131071 : 524287);
    if (isSetToAccountId())
      hashCode = hashCode * 8191 + toAccountId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

    return hashCode;
  }

  @Override
  public int compareTo(TransactionEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTxId()).compareTo(other.isSetTxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txId, other.txId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromAccountId()).compareTo(other.isSetFromAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromAccountId, other.fromAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToAccountId()).compareTo(other.isSetToAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toAccountId, other.toAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TransactionEvent(");
    boolean first = true;

    if (isSetV()) {
      sb.append("v:");
      sb.append(this.v);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("txId:");
    if (this.txId == null) {
      sb.append("null");
    } else {
      sb.append(this.txId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromAccountId:");
    if (this.fromAccountId == null) {
      sb.append("null");
    } else {
      sb.append(this.fromAccountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toAccountId:");
    if (this.toAccountId == null) {
      sb.append("null");
    } else {
      sb.append(this.toAccountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (txId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'txId' was not present! Struct: " + toString());
    }
    if (fromAccountId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromAccountId' was not present! Struct: " + toString());
    }
    if (toAccountId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toAccountId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionEventStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransactionEventStandardScheme getScheme() {
      return new TransactionEventStandardScheme();
    }
  }

  private static class TransactionEventStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransactionEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // V
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.v = iprot.readI16();
              struct.setVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txId = iprot.readString();
              struct.setTxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromAccountId = iprot.readString();
              struct.setFromAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toAccountId = iprot.readString();
              struct.setToAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetV()) {
        oprot.writeFieldBegin(V_FIELD_DESC);
        oprot.writeI16(struct.v);
        oprot.writeFieldEnd();
      }
      if (struct.txId != null) {
        oprot.writeFieldBegin(TX_ID_FIELD_DESC);
        oprot.writeString(struct.txId);
        oprot.writeFieldEnd();
      }
      if (struct.fromAccountId != null) {
        oprot.writeFieldBegin(FROM_ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.fromAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.toAccountId != null) {
        oprot.writeFieldBegin(TO_ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.toAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionEventTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransactionEventTupleScheme getScheme() {
      return new TransactionEventTupleScheme();
    }
  }

  private static class TransactionEventTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransactionEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.txId);
      oprot.writeString(struct.fromAccountId);
      oprot.writeString(struct.toAccountId);
      oprot.writeDouble(struct.amount);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetV()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetV()) {
        oprot.writeI16(struct.v);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.txId = iprot.readString();
      struct.setTxIdIsSet(true);
      struct.fromAccountId = iprot.readString();
      struct.setFromAccountIdIsSet(true);
      struct.toAccountId = iprot.readString();
      struct.setToAccountIdIsSet(true);
      struct.amount = iprot.readDouble();
      struct.setAmountIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.v = iprot.readI16();
        struct.setVIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

